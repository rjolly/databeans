/*
 * AdminUI.java
 *
 * Created on February 10, 2008, 12:35 PM
 */

package persistence.client;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Enumeration;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.swing.event.TreeExpansionEvent;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.event.TreeWillExpandListener;
import javax.swing.table.AbstractTableModel;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.ExpandVetoException;
import javax.swing.tree.TreeNode;
import javax.swing.tree.TreeSelectionModel;
import persistence.AdminConnection;
import persistence.Array;
import persistence.Connections;
import persistence.PersistentClass;
import persistence.PersistentObject;

/**
 *
 * @author  raphael
 */
public class AdminUI extends javax.swing.JFrame {
	AdminConnection conn;
	DefaultTreeModel model=new DefaultTreeModel(ObjectTreeNode.node(null,"system"));

	/** Creates new form AdminUI */
	public AdminUI() {
		initComponents();
		jTree1.setModel(model);
		jTree1.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);
		jTree1.addTreeSelectionListener(new TreeSelectionListener() {
			public void valueChanged(TreeSelectionEvent e) {
				ObjectTreeNode node = (ObjectTreeNode)jTree1.getLastSelectedPathComponent();
				Object object = node==null?null:node.object;
				int n = jSplitPane1.getDividerLocation();
				if(object instanceof PersistentObject) {
					jTable1.setModel(ObjectTableModel.model(object));
					jSplitPane1.setRightComponent(jScrollPane3);
				} else {
					jTextArea1.setText(String.valueOf(object));
					jSplitPane1.setRightComponent(jScrollPane2);
				}
				jSplitPane1.setDividerLocation(n);
			}
		});
		jTree1.addTreeWillExpandListener(new TreeWillExpandListener() {
			public void treeWillCollapse(TreeExpansionEvent event) throws ExpandVetoException {}

			public void treeWillExpand(TreeExpansionEvent event) throws ExpandVetoException {
				model.reload((TreeNode)event.getPath().getLastPathComponent());
			}
		});
	}

	void open() {
		try {
			conn=Connections.getAdminConnection("//localhost/store");
			model.setRoot(ObjectTreeNode.node(conn.system(),"system"));
			model.reload();
			jTree1.setModel(model);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
        // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
        private void initComponents() {

                jScrollPane3 = new javax.swing.JScrollPane();
                jTable1 = new javax.swing.JTable();
                jTabbedPane1 = new javax.swing.JTabbedPane();
                jSplitPane1 = new javax.swing.JSplitPane();
                jScrollPane1 = new javax.swing.JScrollPane();
                jTree1 = new javax.swing.JTree();
                jScrollPane2 = new javax.swing.JScrollPane();
                jTextArea1 = new javax.swing.JTextArea();
                menuBar = new javax.swing.JMenuBar();
                fileMenu = new javax.swing.JMenu();
                openMenuItem = new javax.swing.JMenuItem();
                exitMenuItem = new javax.swing.JMenuItem();
                helpMenu = new javax.swing.JMenu();
                aboutMenuItem = new javax.swing.JMenuItem();

                jTable1.setModel(new javax.swing.table.DefaultTableModel(
                        new Object [][] {
                                {null, null},
                                {null, null},
                                {null, null},
                                {null, null}
                        },
                        new String [] {
                                "Title 1", "Title 2"
                        }
                ));
                jScrollPane3.setViewportView(jTable1);

                setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

                jScrollPane1.setViewportView(jTree1);

                jSplitPane1.setLeftComponent(jScrollPane1);

                jTextArea1.setColumns(20);
                jTextArea1.setEditable(false);
                jTextArea1.setLineWrap(true);
                jTextArea1.setRows(5);
                jScrollPane2.setViewportView(jTextArea1);

                jSplitPane1.setRightComponent(jScrollPane2);

                jTabbedPane1.addTab("system", jSplitPane1);

                fileMenu.setText("Connection");

                openMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
                openMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/development/Server16.gif"))); // NOI18N
                openMenuItem.setText("Open");
                openMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                openMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(openMenuItem);

                exitMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
                exitMenuItem.setText("Exit");
                exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
                        public void actionPerformed(java.awt.event.ActionEvent evt) {
                                exitMenuItemActionPerformed(evt);
                        }
                });
                fileMenu.add(exitMenuItem);

                menuBar.add(fileMenu);

                helpMenu.setText("Help");

                aboutMenuItem.setIcon(new javax.swing.ImageIcon(getClass().getResource("/toolbarButtonGraphics/general/About16.gif"))); // NOI18N
                aboutMenuItem.setText("About");
                helpMenu.add(aboutMenuItem);

                menuBar.add(helpMenu);

                setJMenuBar(menuBar);

                org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
                getContentPane().setLayout(layout);
                layout.setHorizontalGroup(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                );
                layout.setVerticalGroup(
                        layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                );

                pack();
        }// </editor-fold>//GEN-END:initComponents

	private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
		System.exit(0);
	}//GEN-LAST:event_exitMenuItemActionPerformed

	private void openMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMenuItemActionPerformed
		open();
	}//GEN-LAST:event_openMenuItemActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new AdminUI().setVisible(true);
			}
		});
	}

        // Variables declaration - do not modify//GEN-BEGIN:variables
        private javax.swing.JMenuItem aboutMenuItem;
        private javax.swing.JMenuItem exitMenuItem;
        private javax.swing.JMenu fileMenu;
        private javax.swing.JMenu helpMenu;
        private javax.swing.JScrollPane jScrollPane1;
        private javax.swing.JScrollPane jScrollPane2;
        private javax.swing.JScrollPane jScrollPane3;
        private javax.swing.JSplitPane jSplitPane1;
        private javax.swing.JTabbedPane jTabbedPane1;
        private javax.swing.JTable jTable1;
        private javax.swing.JTextArea jTextArea1;
        private javax.swing.JTree jTree1;
        private javax.swing.JMenuBar menuBar;
        private javax.swing.JMenuItem openMenuItem;
        // End of variables declaration//GEN-END:variables
}

class ObjectTreeNode implements TreeNode {
	Object object;
	String name;
	TreeNode parent;
	String fields[];

	public ObjectTreeNode(Object object, String name, TreeNode parent) {
		this.object=object;
		this.name=name;
		this.parent=parent;
		if(object instanceof PersistentObject) {
			PersistentObject obj=(PersistentObject)object;
			PersistentClass clazz=obj.persistentClass();
			String str=clazz.getFields();
			fields=str.length()==0?new String[0]:str.split(";");
		} else fields=new String[0];
	}

	public Enumeration children() {
		return new Enumeration() {
			int index;

			public boolean hasMoreElements() {
				return index<fields.length;
			}

			public Object nextElement() {
				return get(index++);
			}
		};
	}

	Object get(int n) {
		String f=fields[n];
		try {
			return object.getClass().getMethod((f.substring(0, 1).equals("Z")?"is":"get")+f.substring(2, 3).toUpperCase()+f.substring(3), new Class[] {}).invoke(object, new Object[] {});
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	public boolean getAllowsChildren() {
		return false;
	}

	public TreeNode getChildAt(int childIndex) {
		return ObjectTreeNode.node(get(childIndex),fields[childIndex].substring(2),this);
	}

	public int getChildCount() {
		return fields.length;
	}

	public int getIndex(TreeNode node) {
		for(int i=0;i<fields.length;i++) if(fields[i].substring(2).equals(((ObjectTreeNode)node).name)) return i;
		return -1;
	}

	public TreeNode getParent() {
		return parent;
	}

	public boolean isLeaf() {
		return fields.length==0;
	}

	public boolean equals(Object obj) {
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final ObjectTreeNode other = (ObjectTreeNode) obj;
		if (this.name != other.name && (this.name == null || !this.name.equals(other.name))) {
			return false;
		}
		return true;
	}

	public int hashCode() {
		int hash = 7;
		hash = 53 * hash + (this.name != null ? this.name.hashCode() : 0);
		return hash;
	}

	public String toString() {
		return name;
	}

	static ObjectTreeNode node(Object object, String name) {
		return node(object,name,null);
	}

	static ObjectTreeNode node(Object object, String name, TreeNode parent) {
		if(object instanceof Array) return new ArrayTreeNode((Array)object,name,parent);
		else if(object instanceof Map) return new MapTreeNode((Map)object,name,parent);
		else if(object instanceof List) return new ListTreeNode((List)object,name,parent);
		else if(object instanceof Collection) return node(new ArrayList((Collection)object),name,parent);
		else return new ObjectTreeNode(object,name,parent);
	}
}

class ArrayTreeNode extends ObjectTreeNode {
	Array array;

	public ArrayTreeNode(Array array, String name, TreeNode parent) {
		super(array,name,parent);
		this.array=(Array)object;
	}

	public Enumeration children() {
		return new Enumeration() {
			int index;

			public boolean hasMoreElements() {
				return index<array.length();
			}

			public Object nextElement() {
				return get(index++);
			}
		};
	}

	Object get(int n) {
		return array.get(n);
	}

	public TreeNode getChildAt(int childIndex) {
		return ObjectTreeNode.node(get(childIndex),String.valueOf(childIndex),this);
	}

	public int getChildCount() {
		return array.length();
	}

	public int getIndex(TreeNode node) {
		return Integer.valueOf(((ObjectTreeNode)node).name).intValue();
	}

	public boolean isLeaf() {
		return array.length()==0;
	}
}

class ListTreeNode extends ObjectTreeNode {
	List list;

	public ListTreeNode(List list, String name, TreeNode parent) {
		super(list,name,parent);
		this.list=(List)object;
	}

	public Enumeration children() {
		return new Enumeration() {
			Iterator iterator=list.iterator();

			public boolean hasMoreElements() {
				return iterator.hasNext();
			}

			public Object nextElement() {
				return iterator.next();
			}
		};
	}

	Object get(int n) {
		return list.get(n);
	}

	public TreeNode getChildAt(int childIndex) {
		return ObjectTreeNode.node(get(childIndex),String.valueOf(childIndex),this);
	}

	public int getChildCount() {
		return list.size();
	}

	public int getIndex(TreeNode node) {
		return Integer.valueOf(((ObjectTreeNode)node).name).intValue();
	}

	public boolean isLeaf() {
		return list.isEmpty();
	}
}

class MapTreeNode extends ObjectTreeNode {
	Map map;
	Object keys[];

	public MapTreeNode(Map map, String name, TreeNode parent) {
		super(map,name,parent);
		this.map=(Map)object;
		keys=map.keySet().toArray();
	}

	public Enumeration children() {
		return new Enumeration() {
			Iterator iterator=map.values().iterator();

			public boolean hasMoreElements() {
				return iterator.hasNext();
			}

			public Object nextElement() {
				return iterator.next();
			}
		};
	}

	Object get(int n) {
		return map.get(keys[n]);
	}

	public boolean getAllowsChildren() {
		return false;
	}

	public TreeNode getChildAt(int childIndex) {
		return ObjectTreeNode.node(get(childIndex),keys[childIndex].toString(),this);
	}

	public int getChildCount() {
		return keys.length;
	}

	public int getIndex(TreeNode node) {
		for(int i=0;i<keys.length;i++) if(keys[i].toString().equals(((ObjectTreeNode)node).name)) return i;
		return -1;
	}

	public boolean isLeaf() {
		return keys.length==0;
	}
}

class ObjectTableModel extends AbstractTableModel {
	Object object;
	String fields[];

	public ObjectTableModel(Object object) {
		this.object=object;
		if(object instanceof PersistentObject) {
			PersistentObject obj=(PersistentObject)object;
			PersistentClass clazz=obj.persistentClass();
			String str=clazz.getFields();
			fields=str.length()==0?new String[0]:str.split(";");
		} else fields=new String[0];
	}

	public int getColumnCount() {
		return 2;
	}

	public int getRowCount() {
		return fields.length;
	}

	public String getColumnName(int column) {
		switch(column) {
			case 0:
				return "field";
			case 1:
				return "value";
			default:
				return null;
		}
	}

	public Object getValueAt(int rowIndex, int columnIndex) {
		switch(columnIndex) {
			case 0:
				return fields[rowIndex].substring(2);
			case 1:
				return get(rowIndex);
			default:
				return null;
		}
	}

	Object get(int n) {
		String f=fields[n];
		try {
			return object.getClass().getMethod((f.substring(0, 1).equals("Z")?"is":"get")+f.substring(2, 3).toUpperCase()+f.substring(3), new Class[] {}).invoke(object, new Object[] {});
		} catch (Exception e) {
			e.printStackTrace();
		}
		return null;
	}

	static ObjectTableModel model(Object object) {
		if(object instanceof Array) return new ArrayTableModel((Array)object);
		else if(object instanceof Map) return new MapTableModel((Map)object);
		else if(object instanceof List) return new ListTableModel((List)object);
		else if(object instanceof Collection) return model(new ArrayList((Collection)object));
		else return new ObjectTableModel(object);
	}
}

class ArrayTableModel extends ObjectTableModel {
	Array array;

	public ArrayTableModel(Array array) {
		super(array);
		this.array=(Array)object;
	}

	public int getRowCount() {
		return array.length();
	}

	public String getColumnName(int column) {
		switch(column) {
			case 0:
				return "index";
			case 1:
				return "value";
			default:
				return null;
		}
	}

	public Object getValueAt(int rowIndex, int columnIndex) {
		switch(columnIndex) {
			case 0:
				return new Integer(rowIndex);
			case 1:
				return get(rowIndex);
			default:
				return null;
		}
	}

	Object get(int n) {
		return array.get(n);
	}
}

class ListTableModel extends ObjectTableModel {
	List list;

	public ListTableModel(List list) {
		super(list);
		this.list=(List)object;
	}

	public int getRowCount() {
		return list.size();
	}

	public String getColumnName(int column) {
		switch(column) {
			case 0:
				return "index";
			case 1:
				return "value";
			default:
				return null;
		}
	}

	public Object getValueAt(int rowIndex, int columnIndex) {
		switch(columnIndex) {
			case 0:
				return new Integer(rowIndex);
			case 1:
				return get(rowIndex);
			default:
				return null;
		}
	}

	Object get(int n) {
		return list.get(n);
	}
}

class MapTableModel extends ObjectTableModel {
	Map map;
	Object keys[];

	public MapTableModel(Map map) {
		super(map);
		this.map=(Map)object;
		keys=map.keySet().toArray();
	}

	public int getRowCount() {
		return keys.length;
	}

	public String getColumnName(int column) {
		switch(column) {
			case 0:
				return "key";
			case 1:
				return "value";
			default:
				return null;
		}
	}

	public Object getValueAt(int rowIndex, int columnIndex) {
		switch(columnIndex) {
			case 0:
				return keys[rowIndex];
			case 1:
				return get(rowIndex);
			default:
				return null;
		}
	}

	Object get(int n) {
		return map.get(keys[n]);
	}
}
